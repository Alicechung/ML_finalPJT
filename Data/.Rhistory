for(z in 1:nrow(senate_norm)){senate_norm[z, ] <- (senate_norm[z, ]/sum(senate_norm[z, ]))}
# K-Means with clusters varies from 2 to N-1
ss <- c()
num_cluster <- c()
for (i in 2:(nrow(senate_norm)-1)){
k_cluster <- kmeans(senate_norm, centers = i)
num_cluster[i] <- i
ss[i] <- k_cluster$tot.withinss
}
View(senate)
num_cluster
length(num_cluster)
senate_norm
senate_norm[1,]
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
setwd("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2")
senate <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/final_dtm.csv"))
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>%
as.matrix()
senate_norm <- senate_matrix_12
for(z in 1:nrow(senate_norm)){senate_norm[z, ] <- (senate_norm[z, ]/sum(senate_norm[z, ]))}
# K-Means with clusters varies from 2 to N-1
ss <- c()
num_cluster <- c()
for (i in 2:(nrow(senate_norm)-1)){
k_cluster <- kmeans(senate_norm, centers = i)
num_cluster[i] <- i
ss[i] <- k_cluster$tot.withinss
}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
setwd("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(forcats)
senate <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/final_dtm.csv"))
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>%
as.matrix()
senate_norm <- senate_matrix_12
for(z in 1:nrow(senate_norm)){senate_norm[z, ] <- (senate_norm[z, ]/sum(senate_norm[z, ]))}
# K-Means with clusters varies from 2 to N-1
ss <- c()
num_cluster <- c()
for (i in 2:100)){
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>%
as.matrix()
senate_norm <- senate_matrix_12
for(z in 1:nrow(senate_norm)){senate_norm[z, ] <- (senate_norm[z, ]/sum(senate_norm[z, ]))}
# K-Means with clusters varies from 2 to N-1
ss <- c()
num_cluster <- c()
for (i in 2:120){
k_cluster <- kmeans(senate_norm, centers = i)
num_cluster[i] <- i
ss[i] <- k_cluster$tot.withinss
}
plot(num_cluster, ss)
# K-Means with 6 clusters
#n.clust_6 <- 6
#set.seed(24534647)
#k_cluster_6 <- kmeans(press_norm, centers = n.clust_6)
#table(k_cluster_6$cluster)
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>%
as.matrix()
senate_norm <- senate_matrix_12
for(z in 1:nrow(senate_norm)){senate_norm[z, ] <- (senate_norm[z, ]/sum(senate_norm[z, ]))}
# K-Means with clusters varies from 2 to N-1
ss <- c()
num_cluster <- c()
# Since it takes so long to run the graph, I limited the obserbations to 120
for (i in 2:120){
k_cluster <- kmeans(senate_norm, centers = i)
num_cluster[i] <- i
ss[i] <- k_cluster$tot.withinss
}
plot(num_cluster, ss)
# K-Means with 6 clusters
n.clust_6 <- 6
set.seed(999)
k_cluster_6 <- kmeans(press_norm, centers = n.clust_6)
# K-Means with 6 clusters
n.clust_6 <- 6
set.seed(999)
k_cluster_6 <- kmeans(senate_norm, centers = n.clust_6)
table(k_cluster_6$cluster)
mat <- matrix(NA, nrow = 1, ncol = ncol(senate_norm))
colnames(mat) <- colnames(senate_norm)
top_10<- matrix(NA, nrow=n.clust_6, ncol=10)
for(k in 1:n.clust_6){
theta_k <- k_cluster_6$centers[k,]
theta_km1 <- colMeans(k_cluster_6$centers[-k,])
mat[1,] <- theta_k - theta_km1
top_10[k,] <- colnames(senate_norm)[order(mat[1,],
decreasing=T)[1:10]]
}
top_10
mix_multi<- function(X, k, tol, seed){
library(MCMCpack)
set.seed(999)
pis<- rdirichlet(1, alpha = rep(100, k))
thetas<- matrix(NA, nrow=k, ncol=ncol(X))
for(z in 1:k){
thetas[z,]<- rdirichlet(1, alpha=rep(100, ncol(X)))
}
rs<- matrix(NA, nrow=nrow(X),ncol=k)
a<- 0
t<- 1
e.log<- function(X, pis, thetas, rs){
log.pis<- log(pis)
log.thetas<- log(thetas)
score<- 0
for(z in 1:nrow(X)){
part1<- rs[z,]*log.pis
part2<- 0
for(j in 1:k){
part2<- part2 + sum(rs[z,j]*X[z,]*log(thetas[j,] + .000001))
}
score<- score + sum(part1) + part2
}
return(score)
}
while(a==0){
for(i in 1:nrow(X)){
for(j in 1:k){
denom<- thetas[j,]^{-X[i,]}
nums<- thetas[-j,]
new_num<- 0
for(l in 1:nrow(nums)){
new_num<- new_num + (pis[l]/pis[j])*prod(nums[l,]^{X[i,]}*denom)}
rs[i,j]<- ifelse(is.na(1/(1 + new_num))==F,1/(1 + new_num), 0)
}
}
e.old<- e.log(X, pis,thetas,  rs)
thetas<- t(rs)%*%X
for(z in 1:k){
thetas[z,]<- (thetas[z,] )/(sum(thetas[z,] ) )
}
pis<- apply(rs, 2, sum)/sum(rs)
t<- t + 1
if(t>1){
e.new<- e.log(X, pis, thetas, rs)
change<- e.new - e.old
print(abs(change))
if(abs(change)<tol){
a<- 1}
}
}
out<- list(thetas, pis, rs)
names(out)<- c('thetas', 'pis', 'rs')
return(out)
}
k<- 6
test<- mix_mult(press_matrix_12, k, 1e-5, 12122007)
mix_multi<- function(X, k, tol, seed){
library(MCMCpack)
set.seed(999)
pis<- rdirichlet(1, alpha = rep(100, k))
thetas<- matrix(NA, nrow=k, ncol=ncol(X))
for(z in 1:k){
thetas[z,]<- rdirichlet(1, alpha=rep(100, ncol(X)))
}
rs<- matrix(NA, nrow=nrow(X),ncol=k)
a<- 0
t<- 1
e.log<- function(X, pis, thetas, rs){
log.pis<- log(pis)
log.thetas<- log(thetas)
score<- 0
for(z in 1:nrow(X)){
part1<- rs[z,]*log.pis
part2<- 0
for(j in 1:k){
part2<- part2 + sum(rs[z,j]*X[z,]*log(thetas[j,] + .000001))
}
score<- score + sum(part1) + part2
}
return(score)
}
while(a==0){
for(i in 1:nrow(X)){
for(j in 1:k){
denom<- thetas[j,]^{-X[i,]}
nums<- thetas[-j,]
new_num<- 0
for(l in 1:nrow(nums)){
new_num<- new_num + (pis[l]/pis[j])*prod(nums[l,]^{X[i,]}*denom)}
rs[i,j]<- ifelse(is.na(1/(1 + new_num))==F,1/(1 + new_num), 0)
}
}
e.old<- e.log(X, pis,thetas,  rs)
thetas<- t(rs)%*%X
for(z in 1:k){
thetas[z,]<- (thetas[z,] )/(sum(thetas[z,] ) )
}
pis<- apply(rs, 2, sum)/sum(rs)
t<- t + 1
if(t>1){
e.new<- e.log(X, pis, thetas, rs)
change<- e.new - e.old
print(abs(change))
if(abs(change)<tol){
a<- 1}
}
}
out<- list(thetas, pis, rs)
names(out)<- c('thetas', 'pis', 'rs')
return(out)
}
k<- 6
test<- mix_multi(press_matrix_12, k, 1e-5, 12122007)
mix_multi<- function(X, k, tol, seed){
library(MCMCpack)
set.seed(999)
pis<- rdirichlet(1, alpha = rep(100, k))
thetas<- matrix(NA, nrow=k, ncol=ncol(X))
for(z in 1:k){
thetas[z,]<- rdirichlet(1, alpha=rep(100, ncol(X)))
}
rs<- matrix(NA, nrow=nrow(X),ncol=k)
a<- 0
t<- 1
e.log<- function(X, pis, thetas, rs){
log.pis<- log(pis)
log.thetas<- log(thetas)
score<- 0
for(z in 1:nrow(X)){
part1<- rs[z,]*log.pis
part2<- 0
for(j in 1:k){
part2<- part2 + sum(rs[z,j]*X[z,]*log(thetas[j,] + .000001))
}
score<- score + sum(part1) + part2
}
return(score)
}
while(a==0){
for(i in 1:nrow(X)){
for(j in 1:k){
denom<- thetas[j,]^{-X[i,]}
nums<- thetas[-j,]
new_num<- 0
for(l in 1:nrow(nums)){
new_num<- new_num + (pis[l]/pis[j])*prod(nums[l,]^{X[i,]}*denom)}
rs[i,j]<- ifelse(is.na(1/(1 + new_num))==F,1/(1 + new_num), 0)
}
}
e.old<- e.log(X, pis,thetas,  rs)
thetas<- t(rs)%*%X
for(z in 1:k){
thetas[z,]<- (thetas[z,] )/(sum(thetas[z,] ) )
}
pis<- apply(rs, 2, sum)/sum(rs)
t<- t + 1
if(t>1){
e.new<- e.log(X, pis, thetas, rs)
change<- e.new - e.old
print(abs(change))
if(abs(change)<tol){
a<- 1}
}
}
out<- list(thetas, pis, rs)
names(out)<- c('thetas', 'pis', 'rs')
return(out)
}
k<- 6
test<- mix_multi(senate_matrix_12, k, 1e-5, 12122007)
mix_multi<- function(X, k, tol, seed){
library(MCMCpack)
set.seed(999)
pis<- rdirichlet(1, alpha = rep(100, k))
thetas<- matrix(NA, nrow=k, ncol=ncol(X))
for(z in 1:k){
thetas[z,]<- rdirichlet(1, alpha=rep(100, ncol(X)))
}
rs<- matrix(NA, nrow=nrow(X),ncol=k)
a<- 0
t<- 1
e.log<- function(X, pis, thetas, rs){
log.pis<- log(pis)
log.thetas<- log(thetas)
score<- 0
for(z in 1:nrow(X)){
part1<- rs[z,]*log.pis
part2<- 0
for(j in 1:k){
part2<- part2 + sum(rs[z,j]*X[z,]*log(thetas[j,] + .000001))
}
score<- score + sum(part1) + part2
}
return(score)
}
while(a==0){
for(i in 1:nrow(X)){
for(j in 1:k){
denom<- thetas[j,]^{-X[i,]}
nums<- thetas[-j,]
new_num<- 0
for(l in 1:nrow(nums)){
new_num<- new_num + (pis[l]/pis[j])*prod(nums[l,]^{X[i,]}*denom)}
rs[i,j]<- ifelse(is.na(1/(1 + new_num))==F,1/(1 + new_num), 0)
}
}
e.old<- e.log(X, pis,thetas,  rs)
thetas<- t(rs)%*%X
for(z in 1:k){
thetas[z,]<- (thetas[z,] )/(sum(thetas[z,] ) )
}
pis<- apply(rs, 2, sum)/sum(rs)
t<- t + 1
if(t>1){
e.new<- e.log(X, pis, thetas, rs)
change<- e.new - e.old
print(abs(change))
if(abs(change)<tol){
a<- 1}
}
}
out<- list(thetas, pis, rs)
names(out)<- c('thetas', 'pis', 'rs')
return(out)
}
k<- 6
test<- mix_multi(senate_matrix_12, k, 1e-5, 999)
table(apply(test$rs, 1, which.max), k_cluster_6$cluster) # confusion matrix
mult_words<- matrix(NA, nrow = k, ncol=10)
for(z in 1:k){
diff<- test$thetas[z,] - apply(test$thetas[-z,], 2, mean)
mult_words[z,]<- colnames(senate_matrix_12)[order(diff, decreasing=T)[1:10]]
}
t(mult_words)
senate <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/final_dtm.csv"))
shelby <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/hw2_sh.csv"))
sessions <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/hw2_ss.csv"))
View(shelby)
# Shelby
shelbym <- mean(shelby$nfire, shelby$nimmi, shelby$nnomin)
# Shelby
summary(shelby)
# Shelby
mean(shelby)
# Shelby
summary(shelby)
summary(sessions)
# Shelby
summary(shelby)
summary(sessions)
k_cluster_6$cluster[k_cluster_6$cluster == 1]
k_cluster_6$cluster[k_cluster_6$cluster == 1]
k_cluster_6$cluster[k_cluster_6$cluster == 2]
print(length(k_cluster_6$cluster[k_cluster_6$cluster == 1]))
k_cluster_6$cluster[k_cluster_6$cluster == 2]
print(length(k_cluster_6$cluster[k_cluster_6$cluster == 1]))
print(k_cluster_6$cluster[k_cluster_6$cluster == 2])
print(length(k_cluster_6$cluster[k_cluster_6$cluster == 1]))
(k_cluster_6$cluster[k_cluster_6$cluster == 2])
print(length(k_cluster_6$cluster[k_cluster_6$cluster == 1]))
k_cluster_6$cluster[k_cluster_6$cluster == 2]
View(senate)
k_cluster_6$cluster
senate <- read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/final_dtm.csv")
shelby <- read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/hw2_sh.csv")
sessions <- read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/hw2_ss.csv")
# Shelby
summary(shelby)
summary(sessions)
##Shelby uses the term "fire department" more often than Sessions. Sessions uses the terms "immigration" and "nomination" more often than Shelby.
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>%
as.matrix()
View(senate)
senate <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/final_dtm.csv"))
shelby <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/hw2_sh.csv"))
sessions <- as_tibble(read.csv("C:/Users/minju/Dropbox/UChicago/MachineLearning/HW2/hw2_ss.csv"))
View(senate)
# Shelby
summary(shelby)
summary(sessions)
##Shelby uses the term "fire department" more often than Sessions. Sessions uses the terms "immigration" and "nomination" more often than Shelby.
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>%
as.matrix()
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>% as.matrix()
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(forcats)
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>% as.matrix()
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(forcats)
select <- dplyr::select
senate_matrix <- as.matrix(senate)
# Matix without the first and second columns
senate_matrix_12 <- senate %>%
select(-(1:2)) %>% as.matrix()
senate_norm <- senate_matrix_12
for(z in 1:nrow(senate_norm)){senate_norm[z, ] <- (senate_norm[z, ]/sum(senate_norm[z, ]))}
# K-Means with clusters varies from 2 to N-1
ss <- c()
num_cluster <- c()
# Since it takes so long to run the graph, I limited the obserbations to 120
for (i in 2:120){
k_cluster <- kmeans(senate_norm, centers = i)
num_cluster[i] <- i
ss[i] <- k_cluster$tot.withinss
}
plot(num_cluster, ss)
# K-Means with 6 clusters
n.clust_6 <- 6
set.seed(999)
k_cluster_6 <- kmeans(senate_norm, centers = n.clust_6)
table(k_cluster_6$cluster)
k_cluster_6$cluster
senate
senate_matrix_12
senate_matrix_12[1,]
senate_matrix <- as.matrix(senate)
senate_matrix_12 <- senate %>%
select(-(1:2))
senate_matrix_12 <- senate_matrix %>%
select(-(1:2))
senate_matrix_12 <- senate %>%
select(-(1:2))%>% as.matrix()
senate_matrix_12
subsets <- subset(senate, select = -c(1,2))
mat_sub <- as.matrix(subsets)
senate_norm <- mat_sub
for(z in 1:nrow(senate_norm)){senate_norm[z, ] <- (senate_norm[z, ]/sum(senate_norm[z, ]))}
ss <- c()
num_cluster <- c()
n.clust_6 <- 6
set.seed(999)
k_cluster_6 <- kmeans(senate_norm, centers = n.clust_6)
table(k_cluster_6$cluster)
k_cluster_6$cluster
library(ggplot2)
library(ggmap)
library(gapminder)
library(fiftystater)
library(rgdal)
library(dplyr)
library(tidyr)
library(tidyverse)
library(stringr)
library(modelr)
library(forcats)
library(rgeos)
library(rgeos)
library(maptools)
gpclibPermitStatus()
setwd("C:/Users/minju/Documents/GitHub/ML_finalPJT/Data")
speech <- read.csv("C:/Users/minju/Documents/GitHub/ML_finalPJT/Data/primaryresult_words_count.csv", header=TRUE)
usa <- readOGR(
"C:/Users/minju/Documents/GitHub/ML_finalPJT/Data/cb_2016_us_state_20m/cb_2016_us_state_20m.shp")
fortify(usa) %>%
head()
usa %>%
fortify(region = "STATEFP") %>%
head()
(usa2 <- usa %>%
fortify(region = "NAME") %>%
as_tibble() %>%
left_join(usa@data, by = c("id" = "NAME")))
usa2 <- usa2 %>%
filter(id != "Alaska", id != "Hawaii", id != "Puerto Rico")
speech$City <- as.character(speech$City)
speech <- cbind(speech, geocode(speech$City))
speech <- speech%>%
mutate(democrat = ifelse(Author == "Barack Obama"|
Author == "Hillary Clinton"|
Author == "John Edwards"|
Author == "Bill Richardson"|
Author == "Christopher Dodd"|
Author == "Joseph Biden"|
Author == "Bernie Sanders"|
Author == "Martin O'Malley"|
Author == "Lincoln Chafee"|
Author == "Jim Webb", 1, 0))
View(speech)
